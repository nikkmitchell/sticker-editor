<!DOCTYPE html>
<html>
<head>
  <style>
    * {
      user-select: none;
      -webkit-user-select: none;
    }
    
    .container {
      display: flex;
      gap: 20px;
      padding: 20px;
      height: 100vh;
      box-sizing: border-box;
    }
    
    .sticker-panel {
      width: 200px;
      background: #f0f0f0;
      padding: 15px;
      border-radius: 8px;
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .canvas-area {
      flex: 1;
      position: relative;
      border: 2px dashed #ccc;
      border-radius: 8px;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
      background: white;
    }
    
    .sticker {
      width: 50px;
      height: 50px;
      cursor: grab;
    }
    
    .draggable-sticker {
      position: absolute;
      cursor: grab;
      width: 50px;
      height: 50px;
      z-index: 1;
    }
    
    .dragging {
      cursor: grabbing;
      z-index: 2;
    }
    
    #uploadedImage {
      max-width: 100%;
      max-height: 100%;
      pointer-events: none;
    }
    
    .button {
      padding: 8px 16px;
      background: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-bottom: 10px;
    }
    
    .button:hover {
      background: #45a049;
    }

    #downloadCanvas {
      display: none;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="sticker-panel">
      <input type="file" id="imageInput" accept="image/*" class="button">
      <button id="downloadBtn" class="button">Download Image</button>
      <h3>Stickers</h3>
      <!-- Circle -->
      <svg class="sticker" viewBox="0 0 100 100">
        <circle cx="50" cy="50" r="40" fill="#ff6b6b"/>
      </svg>
      <!-- Star -->
      <svg class="sticker" viewBox="0 0 100 100">
        <polygon points="50,10 61,39 92,39 67,58 77,90 50,70 23,90 33,58 8,39 39,39" fill="#ffd93d"/>
      </svg>
      <!-- Heart -->
      <svg class="sticker" viewBox="0 0 100 100">
        <path d="M50,80 C90,40 90,20 50,20 C10,20 10,40 50,80" fill="#ff4757"/>
      </svg>
      <!-- Square -->
      <svg class="sticker" viewBox="0 0 100 100">
        <rect x="20" y="20" width="60" height="60" fill="#2ed573"/>
      </svg>
    </div>
    
    <div class="canvas-area" id="canvasArea">
      <img id="uploadedImage">
    </div>
  </div>

  <canvas id="downloadCanvas"></canvas>

  <script>
    // Handle image upload
    document.getElementById('imageInput').addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(event) {
          document.getElementById('uploadedImage').src = event.target.result;
        };
        reader.readAsDataURL(file);
      }
    });

    // Drag and Drop functionality
    let draggedElement = null;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;

    // Event listeners for sticker panel items
    document.querySelectorAll('.sticker').forEach(sticker => {
      sticker.addEventListener('mousedown', function(e) {
        e.preventDefault();
        // Create clone of sticker
        const clone = this.cloneNode(true);
        clone.classList.remove('sticker');
        clone.classList.add('draggable-sticker');
        
        const canvasArea = document.getElementById('canvasArea');
        const rect = canvasArea.getBoundingClientRect();
        
        // Position clone at mouse position
        const x = e.clientX - rect.left - 25;
        const y = e.clientY - rect.top - 25;
        clone.style.left = x + 'px';
        clone.style.top = y + 'px';
        
        canvasArea.appendChild(clone);
        
        // Start dragging the clone
        draggedElement = clone;
        initialX = e.clientX - x;
        initialY = e.clientY - y;
      });
    });

    // Event listeners for draggable stickers
    document.addEventListener('mousedown', function(e) {
      if (e.target.closest('.draggable-sticker')) {
        e.preventDefault();
        draggedElement = e.target.closest('.draggable-sticker');
        draggedElement.classList.add('dragging');
        
        const rect = draggedElement.getBoundingClientRect();
        initialX = e.clientX - rect.left;
        initialY = e.clientY - rect.top;
      }
    });

    document.addEventListener('mousemove', function(e) {
      if (draggedElement) {
        e.preventDefault();
        
        const canvasArea = document.getElementById('canvasArea');
        const rect = canvasArea.getBoundingClientRect();
        
        let x = e.clientX - rect.left - initialX;
        let y = e.clientY - rect.top - initialY;
        
        // Keep sticker within canvas bounds
        x = Math.min(Math.max(0, x), rect.width - draggedElement.offsetWidth);
        y = Math.min(Math.max(0, y), rect.height - draggedElement.offsetHeight);
        
        draggedElement.style.left = x + 'px';
        draggedElement.style.top = y + 'px';
      }
    });

    document.addEventListener('mouseup', function() {
      if (draggedElement) {
        draggedElement.classList.remove('dragging');
        draggedElement = null;
      }
    });

    // Download functionality
    document.getElementById('downloadBtn').addEventListener('click', async function() {
      const canvasArea = document.getElementById('canvasArea');
      const uploadedImage = document.getElementById('uploadedImage');
      const canvas = document.getElementById('downloadCanvas');
      const ctx = canvas.getContext('2d');

      // Set canvas size to match canvas area
      canvas.width = canvasArea.offsetWidth;
      canvas.height = canvasArea.offsetHeight;

      // Draw the background image
      if (uploadedImage.src) {
        ctx.drawImage(uploadedImage, 0, 0, canvas.width, canvas.height);
      }

      // Draw each sticker
      const stickers = document.querySelectorAll('.draggable-sticker');
      
      for (const sticker of stickers) {
        const rect = sticker.getBoundingClientRect();
        const canvasRect = canvasArea.getBoundingClientRect();
        
        // Convert SVG to data URL
        const svgData = new XMLSerializer().serializeToString(sticker);
        const blob = new Blob([svgData], {type: 'image/svg+xml'});
        const url = URL.createObjectURL(blob);
        
        await new Promise((resolve) => {
          const img = new Image();
          img.onload = () => {
            ctx.drawImage(
              img,
              rect.left - canvasRect.left,
              rect.top - canvasRect.top,
              rect.width,
              rect.height
            );
            URL.revokeObjectURL(url);
            resolve();
          };
          img.src = url;
        });
      }

      // Download the canvas
      const link = document.createElement('a');
      link.download = 'sticker-image.png';
      canvas.toBlob(function(blob) {
        link.href = URL.createObjectURL(blob);
        link.click();
        URL.revokeObjectURL(link.href);
      });
    });
  </script>
</body>
</html>
